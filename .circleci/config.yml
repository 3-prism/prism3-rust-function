version: 2.1

# ==============================================================================
# Configuration
# This project uses Rust nightly toolchain for all CI jobs
# Reason: rustfmt requires nightly for imports_layout = "Vertical" feature
# ==============================================================================

# ==============================================================================
# Job Definitions
# Each job represents a collection of steps to be executed in a specific environment.
# All jobs use the official Rust nightly Docker image
# ==============================================================================
jobs:
  # ------------------------------------------------------------------------------
  # Job: Fast Quality Checks
  # Combines format checking and linting in a single job to reduce container spin-up overhead.
  # This optimization reduces the number of containers from 2 to 1, saving ~15-20 seconds.
  # ------------------------------------------------------------------------------
  fast_checks:
    docker:
      - image: rustlang/rust:nightly
    steps:
      - checkout
      # Restore cached dependencies to speed up the process
      - restore_cache:
          keys:
            - v3-cargo-cache-nightly-{{ arch }}-{{ checksum "Cargo.toml" }}-{{ checksum "Cargo.lock" }}
            - v3-cargo-cache-nightly-{{ arch }}-{{ checksum "Cargo.toml" }}-
            - v3-cargo-cache-nightly-{{ arch }}-
      - run:
          name: Install rustfmt component
          command: rustup component add rustfmt
      - run:
          name: Check code format
          command: cargo fmt -- --check
      - run:
          name: Install clippy component
          command: rustup component add clippy
      - run:
          name: Run clippy (with dependency caching)
          command: |
            # Use cargo check first to build dependencies, then clippy
            cargo clippy --all-targets --all-features -- -D warnings
      # Save cache for future runs (separate caches for registry and build artifacts)
      - save_cache:
          key: v3-cargo-cache-nightly-{{ arch }}-{{ checksum "Cargo.toml" }}-{{ checksum "Cargo.lock" }}
          paths:
            - "~/.cargo/registry/index"
            - "~/.cargo/registry/cache"
            - "~/.cargo/git/db"
            - "target"

  # ------------------------------------------------------------------------------
  # Job: Build, Test and Coverage
  # Combines building, testing, and coverage generation in a single job.
  # This optimization eliminates an additional container spin-up (~12-15 seconds).
  # Tests are run directly via cargo-llvm-cov to avoid duplicate test execution,
  # saving ~50% of test execution time.
  # ------------------------------------------------------------------------------
  build_test_coverage:
    docker:
      - image: rustlang/rust:nightly
    resource_class: medium+
    steps:
      - checkout
      # Restore enhanced cargo cache
      - restore_cache:
          keys:
            - v3-cargo-cache-nightly-{{ arch }}-{{ checksum "Cargo.toml" }}-{{ checksum "Cargo.lock" }}
            - v3-cargo-cache-nightly-{{ arch }}-{{ checksum "Cargo.toml" }}-
            - v3-cargo-cache-nightly-{{ arch }}-
      # Restore cache for cargo-binstall
      - restore_cache:
          keys:
            - v1-cargo-binstall-{{ arch }}-v1.10.15
            - v1-cargo-binstall-{{ arch }}-
      # Restore cache for cargo-llvm-cov
      - restore_cache:
          keys:
            - v1-cargo-binaries-llvm-cov-0.6.21-{{ arch }}
            - v1-cargo-binaries-llvm-cov-
      - run:
          name: Install cargo-binstall
          command: |
            if ! command -v cargo-binstall &> /dev/null; then
              echo "📥 Installing cargo-binstall..."
              curl -L --proto '=https' --tlsv1.2 -sSf https://raw.githubusercontent.com/cargo-bins/cargo-binstall/main/install-from-binstall-release.sh | bash
            else
              echo "✅ cargo-binstall already installed (cached)"
            fi
      - run:
          name: Install cargo-llvm-cov
          command: |
            if ! command -v cargo-llvm-cov &> /dev/null; then
              echo "📥 Installing cargo-llvm-cov via cargo-binstall..."
              cargo binstall cargo-llvm-cov --version 0.6.21 --no-confirm --log-level info
            else
              echo "✅ cargo-llvm-cov already installed (cached)"
            fi
            rustup component add llvm-tools-preview
      - run:
          name: Build project (debug)
          command: cargo build --verbose
      - run:
          name: Run tests and generate coverage report
          command: |
            # Auto-detect package name from Cargo.toml
            PACKAGE_NAME=$(grep "^name = " Cargo.toml | head -n 1 | sed 's/name = "\(.*\)"/\1/')
            echo "📦 Detected package: $PACKAGE_NAME"
            # Generate LCOV report for Coveralls
            cargo llvm-cov --package "$PACKAGE_NAME" \
              --lcov --output-path coverage.lcov \
              --ignore-filename-regex "(\.cargo/registry|\.rustup/)"
            # Generate a text report for console output
            cargo llvm-cov --package "$PACKAGE_NAME" \
              --ignore-filename-regex "(\.cargo/registry|\.rustup/)" \
              | tee coverage.txt
      - run:
          name: Display coverage summary
          command: |
            echo "================================"
            echo "Code Coverage Summary"
            echo "================================"
            cat coverage.txt
      - run:
          name: Upload coverage to Coveralls
          command: |
            if [ -n "$COVERALLS_REPO_TOKEN" ]; then
              echo "📤 Uploading coverage report to Coveralls..."
              curl -sL https://coveralls.io/coveralls-linux.tar.gz | tar -xz
              ./coveralls report coverage.lcov --repo-token="$COVERALLS_REPO_TOKEN"
              echo "✅ Coverage report uploaded to Coveralls"
            else
              echo "⚠️  COVERALLS_REPO_TOKEN not set, skipping upload"
            fi
      - run:
          name: Build project (release)
          command: cargo build --release --verbose
      # Save all caches
      - save_cache:
          key: v3-cargo-cache-nightly-{{ arch }}-{{ checksum "Cargo.toml" }}-{{ checksum "Cargo.lock" }}
          paths:
            - "~/.cargo/registry/index"
            - "~/.cargo/registry/cache"
            - "~/.cargo/git/db"
            - "target"
      - save_cache:
          key: v1-cargo-binstall-{{ arch }}-v1.10.15
          paths:
            - "~/.cargo/bin/cargo-binstall"
      - save_cache:
          key: v1-cargo-binaries-llvm-cov-0.6.21-{{ arch }}
          paths:
            - "~/.cargo/bin/cargo-llvm-cov"
            - "~/.cargo/bin/llvm-cov"
            - "~/.cargo/bin/llvm-profdata"
      # Store coverage reports as artifacts
      - store_artifacts:
          path: coverage.lcov
      - store_artifacts:
          path: coverage.txt
      # Persist the `target` directory to the workspace for downstream jobs
      - persist_to_workspace:
          root: .
          paths:
            - target


  # ------------------------------------------------------------------------------
  # Job: Build Documentation
  # Generates API documentation using `rustdoc`.
  # ------------------------------------------------------------------------------
  doc:
    docker:
      - image: rustlang/rust:nightly
    steps:
      - checkout
      # Restore enhanced cargo cache
      - restore_cache:
          keys:
            - v3-cargo-cache-nightly-{{ arch }}-{{ checksum "Cargo.toml" }}-{{ checksum "Cargo.lock" }}
            - v3-cargo-cache-nightly-{{ arch }}-{{ checksum "Cargo.toml" }}-
            - v3-cargo-cache-nightly-{{ arch }}-
      # Attach workspace to reuse build artifacts from build_and_test
      - attach_workspace:
          at: .
      - run:
          name: Generate documentation
          command: cargo doc --no-deps --verbose
      # Store the generated documentation as an artifact
      - store_artifacts:
          path: target/doc
          destination: doc

  # ------------------------------------------------------------------------------
  # Job: Security Audit
  # Checks for security vulnerabilities in dependencies using `cargo-audit`.
  # ------------------------------------------------------------------------------
  security_audit:
    docker:
      - image: rustlang/rust:nightly
    steps:
      - checkout
      # Restore enhanced cargo cache
      - restore_cache:
          keys:
            - v3-cargo-cache-nightly-{{ arch }}-{{ checksum "Cargo.toml" }}-{{ checksum "Cargo.lock" }}
            - v3-cargo-cache-nightly-{{ arch }}-{{ checksum "Cargo.toml" }}-
            - v3-cargo-cache-nightly-{{ arch }}-
      # Restore cache for cargo-binstall
      - restore_cache:
          keys:
            - v1-cargo-binstall-{{ arch }}-v1.10.15
            - v1-cargo-binstall-{{ arch }}-
      # Restore cache for cargo-audit binary
      - restore_cache:
          keys:
            - v1-cargo-binaries-audit-{{ arch }}-latest
            - v1-cargo-binaries-audit-{{ arch }}-
      - run:
          name: Install cargo-binstall
          command: |
            # Install cargo-binstall if not already cached
            if ! command -v cargo-binstall &> /dev/null; then
              echo "📥 Installing cargo-binstall..."
              curl -L --proto '=https' --tlsv1.2 -sSf https://raw.githubusercontent.com/cargo-bins/cargo-binstall/main/install-from-binstall-release.sh | bash
            else
              echo "✅ cargo-binstall already installed (cached)"
            fi
      - run:
          name: Install cargo-audit
          command: |
            # Use cargo-binstall for faster installation (downloads precompiled binaries)
            if ! command -v cargo-audit &> /dev/null; then
              echo "📥 Installing cargo-audit via cargo-binstall..."
              cargo binstall cargo-audit --no-confirm --log-level info
            else
              echo "✅ cargo-audit already installed (cached)"
            fi
      # Save enhanced cargo cache
      - save_cache:
          key: v3-cargo-cache-nightly-{{ arch }}-{{ checksum "Cargo.toml" }}-{{ checksum "Cargo.lock" }}
          paths:
            - "~/.cargo/registry/index"
            - "~/.cargo/registry/cache"
            - "~/.cargo/git/db"
      - save_cache:
          key: v1-cargo-binstall-{{ arch }}-v1.10.15
          paths:
            - "~/.cargo/bin/cargo-binstall"
      # Save cache for cargo-audit binary
      - save_cache:
          key: v1-cargo-binaries-audit-{{ arch }}-latest
          paths:
            - "~/.cargo/bin/cargo-audit"
      - run:
          name: Run security audit
          command: cargo audit

# ==============================================================================
# Workflow Definitions
# Orchestrates the execution of jobs, defining their order and dependencies.
# ==============================================================================
workflows:
  version: 2

  # ------------------------------------------------------------------------------
  # Workflow: Main Build and Test Pipeline
  # Triggered on every commit to any branch.
  # Optimized to reduce container spin-up overhead by combining related jobs.
  # Total containers: 4 (down from original 7)
  # ------------------------------------------------------------------------------
  main_pipeline:
    jobs:
      # Stage 1: Fast quality checks (format + lint in one container)
      - fast_checks

      # Stage 2: Build, test and coverage in one container
      # This is the core job that includes:
      #   - Build (debug + release)
      #   - Run tests with coverage (via cargo-llvm-cov)
      #   - Generate coverage reports
      #   - Upload to Coveralls
      # Optimizations:
      #   - Eliminates separate coverage container (~12-15 seconds saved)
      #   - Avoids duplicate test execution (~50% test time saved)
      - build_test_coverage:
          requires:
            - fast_checks

      # Stage 3: Run additional validation jobs in parallel
      # These jobs reuse build artifacts from build_test_coverage
      - doc:
          requires:
            - build_test_coverage
      - security_audit:
          requires:
            - build_test_coverage

  # ------------------------------------------------------------------------------
  # Workflow: Nightly Security Audit
  # Runs a security audit daily at midnight UTC on production branches.
  # ------------------------------------------------------------------------------
  nightly_security:
    triggers:
      - schedule:
          # Cron syntax for daily at 00:00 UTC
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - main
                - master
    jobs:
      - security_audit
